"use strict";
var _this = this;
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var lodash_1 = require('lodash');
chai.use(chaiAsPromised);
var assert = chai.assert, expect = chai.expect;
var networkInterface_1 = require('../src/networkInterface');
var graphql_1 = require('graphql');
var swapiSchema = require('swapi-graphql').schema;
describe('network interface', function () {
    before(function () {
        _this.realFetch = global['fetch'];
        global['fetch'] = (function (url, opts) {
            if (url === 'http://does-not-exist.test/') {
                return Promise.reject('Network error');
            }
            else if (url === 'http://graphql-swapi.test/') {
                return new Promise(function (resolve, reject) {
                    var request = JSON.parse(opts.body);
                    graphql_1.graphql(swapiSchema, request.query, undefined, request.variables).then(function (result) {
                        var response = new global['Response'](JSON.stringify(result));
                        resolve(response);
                    }).catch(function (error) {
                        reject(error);
                    });
                });
            }
            else {
                return _this.realFetch(url, opts);
            }
        });
    });
    after(function () {
        global['fetch'] = _this.realFetch;
    });
    describe('creating a network interface', function () {
        it('should throw without an endpoint', function () {
            assert.throws(function () {
                networkInterface_1.createNetworkInterface(null);
            }, /A remote enpdoint is required for a network layer/);
        });
        it('should create an instance with a given uri', function () {
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql');
            assert.equal(networkInterface._uri, '/graphql');
        });
        it('should allow for storing of custom options', function () {
            var customOpts = {
                headers: { 'Authorizaion': 'working' },
                credentials: 'include',
            };
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql', customOpts);
            assert.deepEqual(networkInterface._opts, lodash_1.assign({}, customOpts));
        });
        it('should not mutate custom options', function () {
            var customOpts = {
                headers: ['Authorizaion', 'working'],
                credentials: 'include',
            };
            var originalOpts = lodash_1.assign({}, customOpts);
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql', customOpts);
            delete customOpts.headers;
            assert.deepEqual(networkInterface._opts, originalOpts);
        });
    });
    describe('middleware', function () {
        it('should throw an error if you pass something bad', function () {
            var malWare = new TestWare();
            delete malWare.applyMiddleware;
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql');
            try {
                networkInterface.use([malWare]);
                expect.fail();
            }
            catch (error) {
                assert.equal(error.message, 'Middleware must implement the applyMiddleware function');
            }
        });
        it('should take a middleware and assign it', function () {
            var testWare = new TestWare();
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql');
            networkInterface.use([testWare]);
            assert.equal(networkInterface._middlewares[0], testWare);
        });
        it('should take more than one middleware and assign it', function () {
            var testWare1 = new TestWare();
            var testWare2 = new TestWare();
            var networkInterface = networkInterface_1.createNetworkInterface('/graphql');
            networkInterface.use([testWare1, testWare2]);
            assert.deepEqual(networkInterface._middlewares, [testWare1, testWare2]);
        });
        it('should alter the request', function () {
            var testWare1 = new TestWare([
                { key: 'personNum', val: 1 },
            ]);
            var swapi = networkInterface_1.createNetworkInterface('http://graphql-swapi.test/');
            swapi.use([testWare1]);
            var simpleRequest = {
                query: "\n          query people($personNum: Int!) {\n            allPeople(first: $personNum) {\n              people {\n                name\n              }\n            }\n          }\n        ",
                variables: {},
                debugName: 'People query',
            };
            return assert.eventually.deepEqual(swapi.query(simpleRequest), {
                data: {
                    allPeople: {
                        people: [
                            {
                                name: 'Luke Skywalker',
                            },
                        ],
                    },
                },
            });
        });
        it('should alter the options', function () {
            var testWare1 = new TestWare([], [
                { key: 'planet', val: 'mars' },
            ]);
            var swapi = networkInterface_1.createNetworkInterface('http://graphql-swapi.test/');
            swapi.use([testWare1]);
            var simpleRequest = {
                query: "\n          query people {\n            allPeople(first: 1) {\n              people {\n                name\n              }\n            }\n          }\n        ",
                variables: {},
                debugName: 'People query',
            };
            return swapi.query(simpleRequest).then(function (data) {
                assert.deepEqual(swapi._opts, { planet: 'mars' });
            });
        });
        it('handle multiple middlewares', function () {
            var testWare1 = new TestWare([
                { key: 'personNum', val: 1 },
            ]);
            var testWare2 = new TestWare([
                { key: 'filmNum', val: 1 },
            ]);
            var swapi = networkInterface_1.createNetworkInterface('http://graphql-swapi.test/');
            swapi.use([testWare1, testWare2]);
            var simpleRequest = {
                query: "\n          query people($personNum: Int!, $filmNum: Int!) {\n            allPeople(first: $personNum) {\n              people {\n                name\n                filmConnection(first: $filmNum) {\n                  edges {\n                    node {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        ",
                variables: {},
                debugName: 'People query',
            };
            return assert.eventually.deepEqual(swapi.query(simpleRequest), {
                data: {
                    allPeople: {
                        people: [
                            {
                                name: 'Luke Skywalker',
                                filmConnection: {
                                    edges: [
                                        {
                                            node: {
                                                id: 'ZmlsbXM6MQ==',
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                },
            });
        });
    });
    describe('making a request', function () {
        it('should fetch remote data', function () {
            var swapi = networkInterface_1.createNetworkInterface('http://graphql-swapi.test/');
            var simpleRequest = {
                query: "\n          query people {\n            allPeople(first: 1) {\n              people {\n                name\n              }\n            }\n          }\n        ",
                variables: {},
                debugName: 'People query',
            };
            return assert.eventually.deepEqual(swapi.query(simpleRequest), {
                data: {
                    allPeople: {
                        people: [
                            {
                                name: 'Luke Skywalker',
                            },
                        ],
                    },
                },
            });
        });
        it('should return errors if the server responds with them', function () {
            var swapi = networkInterface_1.createNetworkInterface('http://graphql-swapi.test/');
            var simpleRequest = {
                query: "\n          query people {\n            allPeople(first: 1) {\n              people {\n                name\n              }\n          }\n        ",
                variables: {},
                debugName: 'People query',
            };
            return assert.eventually.deepEqual(swapi.query(simpleRequest), {
                errors: [
                    {
                        message: 'Syntax Error GraphQL request (8:9) Expected Name, found EOF\n\n7:           }\n8:         \n           ^\n',
                    },
                ],
            });
        });
        it('should throw on a network error', function () {
            var nowhere = networkInterface_1.createNetworkInterface('http://does-not-exist.test/');
            var doomedToFail = {
                query: "\n          query people {\n            allPeople(first: 1) {\n              people {\n                name\n              }\n            }\n          }\n        ",
                variables: {},
                debugName: 'People Query',
            };
            return assert.isRejected(nowhere.query(doomedToFail));
        });
    });
});
function TestWare(variables, options) {
    if (variables === void 0) { variables = []; }
    if (options === void 0) { options = []; }
    this.applyMiddleware = function (request, next) {
        variables.map(function (variable) {
            request.request.variables[variable.key] = variable.val;
        });
        options.map(function (variable) {
            request.options[variable.key] = variable.val;
        });
        next();
    };
}
//# sourceMappingURL=networkInterface.js.map