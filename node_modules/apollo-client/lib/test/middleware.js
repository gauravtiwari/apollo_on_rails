"use strict";
var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var lodash_1 = require('lodash');
chai.use(chaiAsPromised);
var assert = chai.assert;
var middleware_1 = require('../src/middleware');
describe('middleware', function () {
    describe('AuthTokenHeaderMiddleware', function () {
        it('should implement applyMiddleware', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            assert.equal(typeof authMiddleware.applyMiddleware, 'function');
        });
        it('should create headers and add if none existing', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            authMiddleware.setToken('token');
            var middlewareRequest = {
                request: {
                    query: "\n            query people($personNum: Int!) {\n              allPeople(first: $personNum) {\n                people {\n                  name\n                }\n              }\n            }\n          ",
                    variables: {},
                    debugName: 'People query',
                },
                options: {},
            };
            var next = function () {
                return;
            };
            var outcome = new Headers();
            outcome['Authorization'] = 'token';
            authMiddleware.applyMiddleware(middlewareRequest, next);
            assert.deepEqual(middlewareRequest.options.headers, outcome);
        });
        it('should add the token to existing headers', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            authMiddleware.setToken('token');
            var existingHeaders = new Headers();
            existingHeaders['Test'] = 'test';
            var middlewareRequest = {
                request: {
                    query: "\n            query people($personNum: Int!) {\n              allPeople(first: $personNum) {\n                people {\n                  name\n                }\n              }\n            }\n          ",
                    variables: {},
                    debugName: 'People query',
                },
                options: {
                    headers: existingHeaders,
                },
            };
            var next = function () {
                return;
            };
            var outcome = lodash_1.cloneDeep(existingHeaders);
            outcome['Authorization'] = 'token';
            authMiddleware.applyMiddleware(middlewareRequest, next);
            assert.deepEqual(middlewareRequest.options.headers, outcome);
        });
        it('should not add the token if no token and no headers', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            var middlewareRequest = {
                request: {
                    query: "\n            query people($personNum: Int!) {\n              allPeople(first: $personNum) {\n                people {\n                  name\n                }\n              }\n            }\n          ",
                    variables: {},
                    debugName: 'People query',
                },
                options: {},
            };
            var next = function () {
                return;
            };
            authMiddleware.applyMiddleware(middlewareRequest, next);
            assert.isUndefined(middlewareRequest.options.headers);
        });
        it('should not add the token if no token and existing headers', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            var existingHeaders = new Headers();
            existingHeaders['Test'] = 'test';
            var middlewareRequest = {
                request: {
                    query: "\n            query people($personNum: Int!) {\n              allPeople(first: $personNum) {\n                people {\n                  name\n                }\n              }\n            }\n          ",
                    variables: {},
                    debugName: 'People query',
                },
                options: {
                    headers: existingHeaders,
                },
            };
            var next = function () {
                return;
            };
            authMiddleware.applyMiddleware(middlewareRequest, next);
            assert.deepEqual(middlewareRequest.options.headers, existingHeaders);
        });
        it('should allow setting a custom header', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            assert.equal(typeof authMiddleware.setHeader, 'function');
        });
        it('should use the custom header instead of default', function () {
            var authMiddleware = new middleware_1.AuthTokenHeaderMiddleware();
            authMiddleware.setHeader('Auth-Token');
            authMiddleware.setToken('token-token');
            var middlewareRequest = {
                request: {
                    query: "\n            query people($personNum: Int!) {\n              allPeople(first: $personNum) {\n                people {\n                  name\n                }\n              }\n            }\n          ",
                    variables: {},
                    debugName: 'People query',
                },
                options: {},
            };
            var next = function () {
                return;
            };
            var outcome = new Headers();
            outcome['Auth-Token'] = 'token-token';
            authMiddleware.applyMiddleware(middlewareRequest, next);
            assert.deepEqual(middlewareRequest.options.headers, outcome);
        });
    });
});
//# sourceMappingURL=middleware.js.map