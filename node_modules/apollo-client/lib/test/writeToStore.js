"use strict";
var chai_1 = require('chai');
var _ = require('lodash');
var writeToStore_1 = require('../src/data/writeToStore');
var extensions_1 = require('../src/data/extensions');
describe('writing to the store', function () {
    it('properly normalizes a trivial item', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        }), (_a = {},
            _a[result.id] = result,
            _a
        ));
        var _a;
    });
    it('properly normalizes an aliased field', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        aliasedField: stringField,\n        numberField,\n        nullField\n      }\n    ";
        var result = {
            id: 'abcd',
            aliasedField: 'This is a string!',
            numberField: 5,
            nullField: null,
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            result: result,
            fragment: fragment,
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = {
                id: 'abcd',
                stringField: 'This is a string!',
                numberField: 5,
                nullField: null,
            },
            _a
        ));
        var _a;
    });
    it('properly normalizes a aliased fields with arguments', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        aliasedField1: stringField(arg: 1),\n        aliasedField2: stringField(arg: 2),\n        numberField,\n        nullField\n      }\n    ";
        var result = {
            id: 'abcd',
            aliasedField1: 'The arg was 1!',
            aliasedField2: 'The arg was 2!',
            numberField: 5,
            nullField: null,
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            result: result,
            fragment: fragment,
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = {
                id: 'abcd',
                'stringField({"arg":"1"})': 'The arg was 1!',
                'stringField({"arg":"2"})': 'The arg was 2!',
                numberField: 5,
                nullField: null,
            },
            _a
        ));
        var _a;
    });
    it('properly normalizes a fragment with variables', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField(arg: $stringArg),\n        numberField(intArg: $intArg, floatArg: $floatArg),\n        nullField\n      }\n    ";
        var variables = {
            intArg: 5,
            floatArg: 3.14,
            stringArg: 'This is a string!',
        };
        var result = {
            id: 'abcd',
            stringField: 'Heyo',
            numberField: 5,
            nullField: null,
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            result: result,
            fragment: fragment,
            variables: variables,
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = {
                id: 'abcd',
                nullField: null,
                'numberField({"intArg":5,"floatArg":3.14})': 5,
                'stringField({"arg":"This is a string!"})': 'Heyo',
            },
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested object with an ID', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedObj {\n          id,\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: {
                id: 'abcde',
                stringField: 'This is a string too!',
                numberField: 6,
                nullField: null,
            },
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
            dataIdFromObject: extensions_1.getIdField,
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), {
                nestedObj: result.nestedObj.id,
            }),
            _a[result.nestedObj.id] = result.nestedObj,
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested object without an ID', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedObj {\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: {
                stringField: 'This is a string too!',
                numberField: 6,
                nullField: null,
            },
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), {
                nestedObj: result.id + ".nestedObj",
            }),
            _a[result.id + ".nestedObj"] = result.nestedObj,
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested object with arguments but without an ID', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedObj(arg: \"val\") {\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: {
                stringField: 'This is a string too!',
                numberField: 6,
                nullField: null,
            },
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), {
                'nestedObj({"arg":"val"})': result.id + ".nestedObj({\"arg\":\"val\"})",
            }),
            _a[result.id + ".nestedObj({\"arg\":\"val\"})"] = result.nestedObj,
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested array with IDs', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedArray {\n          id,\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                {
                    id: 'abcde',
                    stringField: 'This is a string too!',
                    numberField: 6,
                    nullField: null,
                },
                {
                    id: 'abcdef',
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
            dataIdFromObject: extensions_1.getIdField,
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: result.nestedArray.map(_.property('id')),
            }),
            _a[result.nestedArray[0].id] = result.nestedArray[0],
            _a[result.nestedArray[1].id] = result.nestedArray[1],
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested array with IDs and a null', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedArray {\n          id,\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                {
                    id: 'abcde',
                    stringField: 'This is a string too!',
                    numberField: 6,
                    nullField: null,
                },
                null,
            ],
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
            dataIdFromObject: extensions_1.getIdField,
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    result.nestedArray[0].id,
                    null,
                ],
            }),
            _a[result.nestedArray[0].id] = result.nestedArray[0],
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested array without IDs', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedArray {\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                {
                    stringField: 'This is a string too!',
                    numberField: 6,
                    nullField: null,
                },
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    (result.id + ".nestedArray.0"),
                    (result.id + ".nestedArray.1"),
                ],
            }),
            _a[result.id + ".nestedArray.0"] = result.nestedArray[0],
            _a[result.id + ".nestedArray.1"] = result.nestedArray[1],
            _a
        ));
        var _a;
    });
    it('properly normalizes a nested array without IDs and a null item', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedArray {\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                null,
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    null,
                    (result.id + ".nestedArray.1"),
                ],
            }),
            _a[result.id + ".nestedArray.1"] = result.nestedArray[1],
            _a
        ));
        var _a;
    });
    it('properly normalizes an array of non-objects', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        simpleArray\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            simpleArray: ['one', 'two', 'three'],
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
            dataIdFromObject: extensions_1.getIdField,
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'simpleArray')), {
                simpleArray: [
                    result.simpleArray[0],
                    result.simpleArray[1],
                    result.simpleArray[2],
                ],
            }),
            _a
        ));
        var _a;
    });
    it('properly normalizes an array of non-objects with null', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        simpleArray\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            simpleArray: [null, 'two', 'three'],
        };
        var normalized = writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        });
        chai_1.assert.deepEqual(normalized, (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'simpleArray')), {
                simpleArray: [
                    result.simpleArray[0],
                    result.simpleArray[1],
                    result.simpleArray[2],
                ],
            }),
            _a
        ));
        var _a;
    });
    it('merges nodes', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        numberField,\n        nullField\n      }\n    ";
        var result = {
            id: 'abcd',
            numberField: 5,
            nullField: null,
        };
        var store = writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
            dataIdFromObject: extensions_1.getIdField,
        });
        var fragment2 = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        nullField\n      }\n    ";
        var result2 = {
            id: 'abcd',
            stringField: 'This is a string!',
            nullField: null,
        };
        var store2 = writeToStore_1.writeFragmentToStore({
            store: store,
            fragment: fragment2,
            result: result2,
            dataIdFromObject: extensions_1.getIdField,
        });
        chai_1.assert.deepEqual(store2, {
            'abcd': _.assign({}, result, result2),
        });
    });
    it('properly normalizes a nested object that returns null', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField,\n        numberField,\n        nullField,\n        nestedObj {\n          id,\n          stringField,\n          numberField,\n          nullField\n        }\n      }\n    ";
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: null,
        };
        chai_1.assert.deepEqual(writeToStore_1.writeFragmentToStore({
            fragment: fragment,
            result: _.cloneDeep(result),
        }), (_a = {},
            _a[result.id] = _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), {
                nestedObj: null,
            }),
            _a
        ));
        var _a;
    });
    it('properly normalizes an object with an ID when no extension is passed', function () {
        var query = "\n      {\n        people_one(id: \"5\") {\n          id\n          stringField\n        }\n      }\n    ";
        var result = {
            people_one: {
                id: 'abcd',
                stringField: 'This is a string!',
            },
        };
        chai_1.assert.deepEqual(writeToStore_1.writeQueryToStore({
            query: query,
            result: _.cloneDeep(result),
        }), {
            'ROOT_QUERY': {
                'people_one({"id":"5"})': 'ROOT_QUERY.people_one({"id":"5"})',
            },
            'ROOT_QUERY.people_one({"id":"5"})': {
                'id': 'abcd',
                'stringField': 'This is a string!',
            },
        });
    });
});
//# sourceMappingURL=writeToStore.js.map