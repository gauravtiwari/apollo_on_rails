"use strict";
var chai_1 = require('chai');
var diffAgainstStore_1 = require('../src/data/diffAgainstStore');
var writeToStore_1 = require('../src/data/writeToStore');
var debug_1 = require('../src/data/debug');
var queryPrinting_1 = require('../src/queryPrinting');
var extensions_1 = require('../src/data/extensions');
describe('diffing queries against the store', function () {
    it('returns nothing when the store is enough', function () {
        var query = "\n      {\n        people_one(id: \"1\") {\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: query,
        });
        chai_1.assert.deepEqual(diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: query,
        }).missingSelectionSets, []);
    });
    it('returns correct selection set when the store is missing one field', function () {
        var firstQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename\n          id\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                __typename: 'Person',
                id: 'lukeId',
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: firstQuery,
            dataIdFromObject: extensions_1.getIdField,
        });
        var secondQuery = "\n      {\n        people_one(id: \"1\") {\n          name,\n          age\n        }\n      }\n    ";
        chai_1.assert.deepEqual(debug_1.stripLoc(diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: secondQuery,
        }).missingSelectionSets), [
            {
                id: 'lukeId',
                typeName: 'Person',
                selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                        {
                            'kind': 'Field',
                            'alias': null,
                            'arguments': [],
                            'directives': [],
                            'name': {
                                'kind': 'Name',
                                'value': 'age',
                            },
                            'selectionSet': null,
                        },
                    ],
                },
            },
        ]);
    });
    it('generates the right query when the store is missing one field', function () {
        var firstQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename,\n          id,\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                __typename: 'Person',
                id: 'lukeId',
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: firstQuery,
            dataIdFromObject: extensions_1.getIdField,
        });
        var secondQuery = "\n      {\n        people_one(id: \"1\") {\n          name,\n          age\n        }\n      }\n    ";
        var missingSelectionSets = diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: secondQuery,
        }).missingSelectionSets;
        chai_1.assert.equal(queryPrinting_1.printQueryForMissingData(missingSelectionSets), "{\n  __node_0: node(id: \"lukeId\") {\n    id\n    ... on Person {\n      age\n    }\n  }\n}\n");
    });
    it('generates the right queries when the store is missing multiple nodes', function () {
        var firstQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename,\n          id,\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                __typename: 'Person',
                id: 'lukeId',
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: firstQuery,
            dataIdFromObject: extensions_1.getIdField,
        });
        var secondQuery = "\n      {\n        people_one(id: \"1\") {\n          name,\n          age\n        }\n        people_one(id: \"4\") {\n          name,\n          age\n        }\n      }\n    ";
        var missingSelectionSets = diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: secondQuery,
        }).missingSelectionSets;
        chai_1.assert.equal(queryPrinting_1.printQueryForMissingData(missingSelectionSets), "{\n  __node_0: node(id: \"lukeId\") {\n    id\n    ... on Person {\n      age\n    }\n  }\n  people_one(id: \"4\") {\n    name\n    age\n  }\n}\n");
    });
    it('caches root queries both under the ID of the node and the query name', function () {
        var firstQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename,\n          id,\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                __typename: 'Person',
                id: '1',
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: firstQuery,
            dataIdFromObject: extensions_1.getIdField,
        });
        var secondQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename,\n          id,\n          name\n        }\n      }\n    ";
        var missingSelectionSets = diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: secondQuery,
        }).missingSelectionSets;
        chai_1.assert.deepEqual(missingSelectionSets, []);
        chai_1.assert.deepEqual(store['1'], result.people_one);
    });
    it('diffs root queries even when IDs are turned off', function () {
        var firstQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename,\n          id,\n          name\n        }\n      }\n    ";
        var result = {
            people_one: {
                __typename: 'Person',
                id: '1',
                name: 'Luke Skywalker',
            },
        };
        var store = writeToStore_1.writeQueryToStore({
            result: result,
            query: firstQuery,
            dataIdFromObject: extensions_1.getIdField,
        });
        var secondQuery = "\n      {\n        people_one(id: \"1\") {\n          __typename\n          id\n          name\n        }\n        people_one(id: \"2\") {\n          __typename\n          id\n          name\n        }\n      }\n    ";
        var missingSelectionSets = diffAgainstStore_1.diffQueryAgainstStore({
            store: store,
            query: secondQuery,
        }).missingSelectionSets;
        chai_1.assert.equal(queryPrinting_1.printQueryForMissingData(missingSelectionSets), "{\n  people_one(id: \"2\") {\n    __typename\n    id\n    name\n  }\n}\n");
        chai_1.assert.deepEqual(store['1'], result.people_one);
    });
});
//# sourceMappingURL=diffAgainstStore.js.map