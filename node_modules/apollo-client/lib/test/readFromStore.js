"use strict";
var chai_1 = require('chai');
var _ = require('lodash');
var readFromStore_1 = require('../src/data/readFromStore');
describe('reading from the store', function () {
    it('rejects malformed queries', function () {
        chai_1.assert.throws(function () {
            readFromStore_1.readFragmentFromStore({
                store: {},
                fragment: "\n          fragment X on Y { name }\n          fragment W on Y { address }\n        ",
                rootId: 'asdf',
            });
        }, /exactly one definition/);
        chai_1.assert.throws(function () {
            readFromStore_1.readFragmentFromStore({
                store: {},
                fragment: "\n          { name }\n        ",
                rootId: 'asdf',
            });
        }, /be a fragment/);
    });
    it('runs a basic fragment', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
        };
        var store = {
            abcd: result,
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: result['stringField'],
            numberField: result['numberField'],
        });
    });
    it('runs a basic fragment with arguments', function () {
        var fragment = "\n      fragment Item on ItemType {\n        id,\n        stringField(arg: $stringArg),\n        numberField(intArg: $intArg, floatArg: $floatArg),\n        nullField\n      }\n    ";
        var variables = {
            intArg: 5,
            floatArg: 3.14,
            stringArg: 'This is a string!',
        };
        var store = {
            abcd: {
                id: 'abcd',
                nullField: null,
                'numberField({"intArg":5,"floatArg":3.14})': 5,
                'stringField({"arg":"This is a string!"})': 'Heyo',
            },
        };
        var result = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: fragment,
            variables: variables,
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(result, {
            id: 'abcd',
            nullField: null,
            numberField: 5,
            stringField: 'Heyo',
        });
    });
    it('runs a nested fragment', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: {
                id: 'abcde',
                stringField: 'This is a string too!',
                numberField: 6,
                nullField: null,
            },
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), { nestedObj: 'abcde' }),
            abcde: result.nestedObj,
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          nestedObj {\n            stringField,\n            numberField\n          }\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            nestedObj: {
                stringField: 'This is a string too!',
                numberField: 6,
            },
        });
    });
    it('runs a nested fragment with an array without IDs', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                {
                    stringField: 'This is a string too!',
                    numberField: 6,
                    nullField: null,
                },
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    'abcd.nestedArray.0',
                    'abcd.nestedArray.1',
                ],
            }),
            'abcd.nestedArray.0': result.nestedArray[0],
            'abcd.nestedArray.1': result.nestedArray[1],
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          nestedArray {\n            stringField,\n            numberField\n          }\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            nestedArray: [
                {
                    stringField: 'This is a string too!',
                    numberField: 6,
                },
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                },
            ],
        });
    });
    it('runs a nested fragment with an array without IDs and a null', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                null,
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    null,
                    'abcd.nestedArray.1',
                ],
            }),
            'abcd.nestedArray.1': result.nestedArray[1],
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          nestedArray {\n            stringField,\n            numberField\n          }\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            nestedArray: [
                null,
                {
                    stringField: 'This is a string also!',
                    numberField: 7,
                },
            ],
        });
    });
    it('runs a nested fragment with an array with IDs and a null', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedArray: [
                null,
                {
                    id: 'abcde',
                    stringField: 'This is a string also!',
                    numberField: 7,
                    nullField: null,
                },
            ],
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'nestedArray')), {
                nestedArray: [
                    null,
                    'abcde',
                ],
            }),
            'abcde': result.nestedArray[1],
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          nestedArray {\n            id,\n            stringField,\n            numberField\n          }\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            nestedArray: [
                null,
                {
                    id: 'abcde',
                    stringField: 'This is a string also!',
                    numberField: 7,
                },
            ],
        });
    });
    it('throws on a missing field', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
        };
        var store = { abcd: result };
        chai_1.assert.throws(function () {
            readFromStore_1.readFragmentFromStore({
                store: store,
                fragment: "\n          fragment FragmentName on Item {\n            stringField,\n            missingField\n          }\n        ",
                rootId: 'abcd',
            });
        }, /field missingField on object/);
    });
    it('runs a nested fragment where the reference is null', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            nestedObj: null,
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'nestedObj')), { nestedObj: null }),
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          nestedObj {\n            stringField,\n            numberField\n          }\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            nestedObj: null,
        });
    });
    it('runs an array of non-objects', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            simpleArray: ['one', 'two', 'three'],
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'simpleArray')), { simpleArray: result.simpleArray }),
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          simpleArray\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            simpleArray: ['one', 'two', 'three'],
        });
    });
    it('runs an array of non-objects with null', function () {
        var result = {
            id: 'abcd',
            stringField: 'This is a string!',
            numberField: 5,
            nullField: null,
            simpleArray: [null, 'two', 'three'],
        };
        var store = {
            abcd: _.assign({}, _.assign({}, _.omit(result, 'simpleArray')), { simpleArray: result.simpleArray }),
        };
        var queryResult = readFromStore_1.readFragmentFromStore({
            store: store,
            fragment: "\n        fragment FragmentName on Item {\n          stringField,\n          numberField,\n          simpleArray\n        }\n      ",
            rootId: 'abcd',
        });
        chai_1.assert.deepEqual(queryResult, {
            stringField: 'This is a string!',
            numberField: 5,
            simpleArray: [null, 'two', 'three'],
        });
    });
});
//# sourceMappingURL=readFromStore.js.map