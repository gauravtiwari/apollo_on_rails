"use strict";
var QueryManager_1 = require('../src/QueryManager');
var store_1 = require('../src/store');
var extensions_1 = require('../src/data/extensions');
var chai_1 = require('chai');
var graphql_1 = require('graphql');
var async_1 = require('async');
describe('QueryManager', function () {
    it('properly roundtrips through a Redux store', function (done) {
        var query = "\n      query people {\n        allPeople(first: 1) {\n          people {\n            name\n          }\n        }\n      }\n    ";
        var data = {
            allPeople: {
                people: [
                    {
                        name: 'Luke Skywalker',
                    },
                ],
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: query },
                result: { data: data },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        var handle = queryManager.watchQuery({
            query: query,
        });
        handle.onResult(function (result) {
            chai_1.assert.deepEqual(result.data, data);
            done();
        });
    });
    it('properly roundtrips through a Redux store with variables', function (done) {
        var query = "\n      query people($firstArg: Int) {\n        allPeople(first: $firstArg) {\n          people {\n            name\n          }\n        }\n      }\n    ";
        var variables = {
            firstArg: 1,
        };
        var data = {
            allPeople: {
                people: [
                    {
                        name: 'Luke Skywalker',
                    },
                ],
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: query, variables: variables },
                result: { data: data },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        var handle = queryManager.watchQuery({
            query: query,
            variables: variables,
        });
        handle.onResult(function (result) {
            chai_1.assert.deepEqual(result.data, data);
            done();
        });
    });
    it('handles GraphQL errors', function (done) {
        var query = "\n      query people {\n        allPeople(first: 1) {\n          people {\n            name\n          }\n        }\n      }\n    ";
        var networkInterface = mockNetworkInterface([
            {
                request: { query: query },
                result: {
                    errors: [
                        {
                            name: 'Name',
                            message: 'This is an error message.',
                        },
                    ],
                },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        var handle = queryManager.watchQuery({
            query: query,
        });
        handle.onResult(function (result) {
            chai_1.assert.equal(result.errors[0].message, 'This is an error message.');
            done();
        });
    });
    it('runs a mutation', function () {
        var mutation = "\n      mutation makeListPrivate {\n        makeListPrivate(id: \"5\")\n      }\n    ";
        var data = {
            makeListPrivate: true,
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: mutation },
                result: { data: data },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        return queryManager.mutate({
            mutation: mutation,
        }).then(function (result) {
            chai_1.assert.deepEqual(result.data, data);
        });
    });
    it('runs a mutation with variables', function () {
        var mutation = "\n      mutation makeListPrivate($listId: ID!) {\n        makeListPrivate(id: $listId)\n      }\n    ";
        var variables = {
            listId: '1',
        };
        var data = {
            makeListPrivate: true,
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: mutation, variables: variables },
                result: { data: data },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        return queryManager.mutate({
            mutation: mutation,
            variables: variables,
        }).then(function (result) {
            chai_1.assert.deepEqual(result.data, data);
        });
    });
    it('runs a mutation and puts the result in the store', function () {
        var mutation = "\n      mutation makeListPrivate {\n        makeListPrivate(id: \"5\") {\n          id,\n          isPrivate,\n        }\n      }\n    ";
        var data = {
            makeListPrivate: {
                id: '5',
                isPrivate: true,
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: mutation },
                result: { data: data },
            },
        ]);
        var store = store_1.createApolloStore({
            config: { dataIdFromObject: extensions_1.getIdField },
        });
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store,
            reduxRootKey: 'apollo',
        });
        return queryManager.mutate({
            mutation: mutation,
        }).then(function (result) {
            chai_1.assert.deepEqual(result.data, data);
            chai_1.assert.deepEqual(store.getState()['apollo'].data['5'], { id: '5', isPrivate: true });
        });
    });
    it('runs a mutation and puts the result in the store', function () {
        var mutation = "\n      mutation makeListPrivate {\n        makeListPrivate(id: \"5\") {\n          id,\n          isPrivate,\n        }\n      }\n    ";
        var data = {
            makeListPrivate: {
                id: '5',
                isPrivate: true,
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: mutation },
                result: { data: data },
            },
        ]);
        var store = store_1.createApolloStore({
            config: { dataIdFromObject: extensions_1.getIdField },
        });
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store,
            reduxRootKey: 'apollo',
        });
        return queryManager.mutate({
            mutation: mutation,
        }).then(function (result) {
            chai_1.assert.deepEqual(result.data, data);
            chai_1.assert.deepEqual(store.getState()['apollo'].data['5'], { id: '5', isPrivate: true });
        });
    });
    it('runs a mutation and puts the result in the store with root key', function () {
        var mutation = "\n      mutation makeListPrivate {\n        makeListPrivate(id: \"5\") {\n          id,\n          isPrivate,\n        }\n      }\n    ";
        var data = {
            makeListPrivate: {
                id: '5',
                isPrivate: true,
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: mutation },
                result: { data: data },
            },
        ]);
        var reduxRootKey = 'test';
        var store = store_1.createApolloStore({
            reduxRootKey: reduxRootKey,
            config: { dataIdFromObject: extensions_1.getIdField },
        });
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store,
            reduxRootKey: reduxRootKey,
        });
        return queryManager.mutate({
            mutation: mutation,
        }).then(function (result) {
            chai_1.assert.deepEqual(result.data, data);
            chai_1.assert.deepEqual(store.getState()[reduxRootKey].data['5'], { id: '5', isPrivate: true });
        });
    });
    it('diffs queries', function (done) {
        testDiffing([
            {
                query: "\n          {\n            people_one(id: \"1\") {\n              __typename,\n              id,\n              name\n            }\n          }\n        ",
                diffedQuery: "\n          {\n            people_one(id: \"1\") {\n              __typename,\n              id,\n              name\n            }\n          }\n        ",
                diffedQueryResponse: {
                    people_one: {
                        __typename: 'Person',
                        id: 'lukeId',
                        name: 'Luke Skywalker',
                    },
                },
                fullResponse: {
                    people_one: {
                        __typename: 'Person',
                        id: 'lukeId',
                        name: 'Luke Skywalker',
                    },
                },
                variables: {},
            },
            {
                query: "\n          {\n            people_one(id: \"1\") {\n              name\n              age\n            }\n          }\n        ",
                diffedQuery: "\n          {\n            __node_0: node(id: \"lukeId\") {\n              id\n              ... on Person {\n                age\n              }\n            }\n          }\n        ",
                diffedQueryResponse: {
                    __node_0: {
                        id: 'lukeId',
                        age: 45,
                    },
                },
                fullResponse: {
                    people_one: {
                        name: 'Luke Skywalker',
                        age: 45,
                    },
                },
                variables: {},
            },
            {
                query: "\n          {\n            people_one(id: \"1\") {\n              id\n              name\n              age\n            }\n          }\n        ",
                diffedQuery: null,
                diffedQueryResponse: null,
                fullResponse: {
                    people_one: {
                        id: 'lukeId',
                        name: 'Luke Skywalker',
                        age: 45,
                    },
                },
                variables: {},
            },
        ], done);
    });
    it("doesn't return data while query is loading", function (done) {
        var query1 = "\n      {\n        people_one(id: 1) {\n          name\n        }\n      }\n    ";
        var data1 = {
            people_one: {
                name: 'Luke Skywalker',
            },
        };
        var query2 = "\n      {\n        people_one(id: 5) {\n          name\n        }\n      }\n    ";
        var data2 = {
            people_one: {
                name: 'Darth Vader',
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: query1 },
                result: { data: data1 },
                delay: 10,
            },
            {
                request: { query: query2 },
                result: { data: data2 },
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        var handle1 = queryManager.watchQuery({
            query: query1,
        });
        var handle2 = queryManager.watchQuery({
            query: query2,
        });
        var handle1Count = 0;
        var handle2Count = 0;
        handle1.onResult(function (result) {
            handle1Count++;
            checkDone();
        });
        handle2.onResult(function (result) {
            handle2Count++;
            checkDone();
        });
        function checkDone() {
            if (handle1Count === 1 && handle2Count === 2) {
                done();
            }
            if (handle1Count > 1) {
                chai_1.assert.fail();
            }
        }
    });
    it("updates result of previous query if the result of a new query overlaps", function (done) {
        var query1 = "\n      {\n        people_one(id: 1) {\n          name\n          age\n        }\n      }\n    ";
        var data1 = {
            people_one: {
                name: 'Luke Skywalker',
                age: 50,
            },
        };
        var query2 = "\n      {\n        people_one(id: 1) {\n          name\n          username\n        }\n      }\n    ";
        var data2 = {
            people_one: {
                name: 'Luke Skywalker has a new name',
                username: 'luke',
            },
        };
        var networkInterface = mockNetworkInterface([
            {
                request: { query: query1 },
                result: { data: data1 },
            },
            {
                request: { query: query2 },
                result: { data: data2 },
                delay: 10,
            },
        ]);
        var queryManager = new QueryManager_1.QueryManager({
            networkInterface: networkInterface,
            store: store_1.createApolloStore(),
            reduxRootKey: 'apollo',
        });
        var handle1Count = 0;
        var handle1 = queryManager.watchQuery({
            query: query1,
        });
        handle1.onResult(function (result) {
            handle1Count++;
            if (handle1Count === 1) {
                chai_1.assert.deepEqual(result.data, data1);
                queryManager.watchQuery({
                    query: query2,
                });
            }
            if (result.data['people_one'].name === 'Luke Skywalker has a new name') {
                chai_1.assert.deepEqual(result.data, {
                    people_one: {
                        name: 'Luke Skywalker has a new name',
                        age: 50,
                    },
                });
                done();
            }
        });
    });
});
function mockNetworkInterface(requestResultArray) {
    var requestToResultMap = {};
    var requestToDelayMap = {};
    requestResultArray.forEach(function (_a) {
        var request = _a.request, result = _a.result, delay = _a.delay;
        requestToResultMap[requestToKey(request)] = result;
        requestToDelayMap[requestToKey(request)] = delay;
    });
    var queryMock = function (request) {
        return new Promise(function (resolve, reject) {
            var resultData = requestToResultMap[requestToKey(request)];
            var delay = requestToDelayMap[requestToKey(request)];
            if (!resultData) {
                throw new Error("Passed request that wasn't mocked: " + requestToKey(request));
            }
            setTimeout(function () {
                resolve(resultData);
            }, delay ? delay : 0);
        });
    };
    return {
        query: queryMock,
    };
}
function requestToKey(request) {
    var query = request.query && graphql_1.print(graphql_1.parse(request.query));
    return JSON.stringify({
        variables: request.variables,
        debugName: request.debugName,
        query: query,
    });
}
function testDiffing(queryArray, done) {
    var networkInterface = mockNetworkInterface(queryArray.map(function (_a) {
        var diffedQuery = _a.diffedQuery, diffedQueryResponse = _a.diffedQueryResponse, _b = _a.variables, variables = _b === void 0 ? {} : _b;
        return {
            request: { query: diffedQuery, variables: variables },
            result: { data: diffedQueryResponse },
        };
    }));
    var queryManager = new QueryManager_1.QueryManager({
        networkInterface: networkInterface,
        store: store_1.createApolloStore({
            config: { dataIdFromObject: extensions_1.getIdField },
        }),
        reduxRootKey: 'apollo',
    });
    var steps = queryArray.map(function (_a) {
        var query = _a.query, fullResponse = _a.fullResponse, variables = _a.variables;
        return function (cb) {
            var handle = queryManager.watchQuery({
                query: query,
                variables: variables,
                forceFetch: false,
            });
            handle.onResult(function (result) {
                chai_1.assert.deepEqual(result.data, fullResponse);
                handle.stop();
                cb();
            });
        };
    });
    async_1.series(steps, function (err, res) {
        if (err) {
            throw err;
        }
        done();
    });
}
//# sourceMappingURL=QueryManager.js.map