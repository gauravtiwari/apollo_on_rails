"use strict";
var networkInterface_1 = require('./networkInterface');
exports.createNetworkInterface = networkInterface_1.createNetworkInterface;
var store_1 = require('./store');
exports.createApolloStore = store_1.createApolloStore;
exports.createApolloReducer = store_1.createApolloReducer;
var QueryManager_1 = require('./QueryManager');
var lodash_1 = require('lodash');
var ApolloClient = (function () {
    function ApolloClient(_a) {
        var _b = _a === void 0 ? {} : _a, networkInterface = _b.networkInterface, reduxRootKey = _b.reduxRootKey;
        this.reduxRootKey = reduxRootKey ? reduxRootKey : 'apollo';
        this.networkInterface = networkInterface ? networkInterface :
            networkInterface_1.createNetworkInterface('/graphql');
    }
    ApolloClient.prototype.watchQuery = function (options) {
        this.initStore();
        return this.queryManager.watchQuery(options);
    };
    ApolloClient.prototype.query = function (options) {
        var _this = this;
        if (options.returnPartialData) {
            throw new Error('returnPartialData option only supported on watchQuery.');
        }
        this.initStore();
        return new Promise(function (resolve, reject) {
            var handle = _this.queryManager.watchQuery(options);
            handle.onResult(function (result) {
                resolve(result);
                handle.stop();
            });
        });
    };
    ApolloClient.prototype.mutate = function (options) {
        this.initStore();
        return this.queryManager.mutate(options);
    };
    ApolloClient.prototype.reducer = function () {
        return store_1.createApolloReducer({});
    };
    ApolloClient.prototype.middleware = function () {
        var _this = this;
        return function (store) {
            _this.setStore(store);
            return function (next) { return function (action) {
                var returnValue = next(action);
                _this.queryManager.broadcastNewStore(store.getState());
                return returnValue;
            }; };
        };
    };
    ApolloClient.prototype.initStore = function () {
        if (this.store) {
            return;
        }
        this.setStore(store_1.createApolloStore({
            reduxRootKey: this.reduxRootKey,
        }));
    };
    ApolloClient.prototype.setStore = function (store) {
        if (lodash_1.isUndefined(store.getState()[this.reduxRootKey])) {
            throw new Error("Existing store does not use apolloReducer for " + this.reduxRootKey);
        }
        this.store = store;
        this.queryManager = new QueryManager_1.QueryManager({
            networkInterface: this.networkInterface,
            reduxRootKey: this.reduxRootKey,
            store: store,
        });
    };
    return ApolloClient;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ApolloClient;
//# sourceMappingURL=index.js.map