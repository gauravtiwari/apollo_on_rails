import { NetworkInterface } from './networkInterface';
import { ApolloStore } from './store';
import { GraphQLResult } from 'graphql';
export declare class QueryManager {
    private networkInterface;
    private store;
    private reduxRootKey;
    private resultCallbacks;
    private idCounter;
    constructor({networkInterface, store, reduxRootKey}: {
        networkInterface: NetworkInterface;
        store: ApolloStore;
        reduxRootKey: string;
    });
    mutate({mutation, variables}: {
        mutation: string;
        variables?: Object;
    }): Promise<GraphQLResult>;
    watchQuery({query, variables, forceFetch, returnPartialData}: WatchQueryOptions): WatchedQueryHandle;
    broadcastNewStore(store: any): void;
    watchQueryInStore(queryId: string): WatchedQueryHandle;
    private stopQuery(queryId);
    private broadcastQueryChange(queryId, result);
    private registerResultCallback(queryId, callback);
}
export interface WatchedQueryHandle {
    id: string;
    isStopped: () => boolean;
    stop(): any;
    onResult(callback: QueryResultCallback): any;
}
export declare type QueryResultCallback = (result: GraphQLResult) => void;
export interface WatchQueryOptions {
    query: string;
    variables?: Object;
    forceFetch?: boolean;
    returnPartialData?: boolean;
}
