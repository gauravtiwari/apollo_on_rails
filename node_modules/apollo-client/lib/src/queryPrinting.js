"use strict";
var graphql_1 = require('graphql');
function printQueryForMissingData(missingSelectionSets) {
    return printQueryFromDefinition(queryDefinition(missingSelectionSets));
}
exports.printQueryForMissingData = printQueryForMissingData;
var idField = {
    kind: 'Field',
    alias: null,
    name: {
        kind: 'Name',
        value: 'id',
    },
};
function printQueryFromDefinition(queryDef) {
    var queryDocumentAst = {
        kind: 'Document',
        definitions: [
            queryDef,
        ],
    };
    return graphql_1.print(queryDocumentAst);
}
exports.printQueryFromDefinition = printQueryFromDefinition;
function queryDefinition(missingSelectionSets) {
    var selections = missingSelectionSets.map(function (missingSelectionSet, ii) {
        if (missingSelectionSet.id === 'ROOT_QUERY') {
            if (missingSelectionSet.selectionSet.selections.length > 1) {
                throw new Error('Multiple root queries, cannot print that yet.');
            }
            return missingSelectionSet.selectionSet.selections[0];
        }
        return nodeSelection({
            alias: "__node_" + ii,
            id: missingSelectionSet.id,
            typeName: missingSelectionSet.typeName,
            selectionSet: missingSelectionSet.selectionSet,
        });
    });
    return {
        kind: 'OperationDefinition',
        operation: 'query',
        name: null,
        variableDefinitions: null,
        directives: [],
        selectionSet: {
            kind: 'SelectionSet',
            selections: selections,
        },
    };
}
exports.queryDefinition = queryDefinition;
function nodeSelection(_a) {
    var id = _a.id, typeName = _a.typeName, selectionSet = _a.selectionSet, alias = _a.alias;
    var aliasNode = alias ? {
        kind: 'Name',
        value: alias,
    } : null;
    return {
        kind: 'Field',
        alias: aliasNode,
        name: {
            kind: 'Name',
            value: 'node',
        },
        arguments: [
            {
                kind: 'Argument',
                name: {
                    kind: 'Name',
                    value: 'id',
                },
                value: {
                    kind: 'StringValue',
                    value: id,
                },
            },
        ],
        directives: [],
        selectionSet: {
            kind: 'SelectionSet',
            selections: [
                idField,
                inlineFragmentSelection({
                    typeName: typeName,
                    selectionSet: selectionSet,
                }),
            ],
        },
    };
}
function inlineFragmentSelection(_a) {
    var typeName = _a.typeName, selectionSet = _a.selectionSet;
    return {
        kind: 'InlineFragment',
        typeCondition: {
            kind: 'NamedType',
            name: {
                kind: 'Name',
                value: typeName,
            },
        },
        directives: [],
        selectionSet: selectionSet,
    };
}
//# sourceMappingURL=queryPrinting.js.map