"use strict";
var lodash_1 = require('lodash');
function isScalarValue(value) {
    var SCALAR_TYPES = ['IntValue', 'FloatValue', 'StringValue', 'BooleanValue'];
    return lodash_1.includes(SCALAR_TYPES, value.kind);
}
function isVariable(value) {
    return value.kind === 'Variable';
}
function storeKeyNameFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
        var argObj_1 = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            if (isScalarValue(value)) {
                argObj_1[name.value] = value.value;
            }
            else if (isVariable(value)) {
                if (!variables) {
                    throw new Error('Internal err: Field has a variable argument but variables not passed.');
                }
                var variableValue = variables[value.name.value];
                argObj_1[name.value] = variableValue;
            }
            else {
                throw new Error('Only scalar argument types currently supported.');
            }
        });
        var stringifiedArgs = JSON.stringify(argObj_1);
        return field.name.value + "(" + stringifiedArgs + ")";
    }
    return field.name.value;
}
exports.storeKeyNameFromField = storeKeyNameFromField;
function resultKeyNameFromField(field) {
    return field.alias ?
        field.alias.value :
        field.name.value;
}
exports.resultKeyNameFromField = resultKeyNameFromField;
//# sourceMappingURL=storeUtils.js.map