"use strict";
var lodash_1 = require('lodash');
var parser_1 = require('../parser');
var storeUtils_1 = require('./storeUtils');
function diffQueryAgainstStore(_a) {
    var store = _a.store, query = _a.query, variables = _a.variables;
    var queryDef = parser_1.parseQuery(query);
    return diffSelectionSetAgainstStore({
        store: store,
        rootId: 'ROOT_QUERY',
        selectionSet: queryDef.selectionSet,
        throwOnMissingField: false,
        variables: variables,
    });
}
exports.diffQueryAgainstStore = diffQueryAgainstStore;
function diffFragmentAgainstStore(_a) {
    var store = _a.store, fragment = _a.fragment, rootId = _a.rootId, variables = _a.variables;
    var fragmentDef = parser_1.parseFragment(fragment);
    return diffSelectionSetAgainstStore({
        store: store,
        rootId: rootId,
        selectionSet: fragmentDef.selectionSet,
        throwOnMissingField: false,
        variables: variables,
    });
}
exports.diffFragmentAgainstStore = diffFragmentAgainstStore;
function diffSelectionSetAgainstStore(_a) {
    var selectionSet = _a.selectionSet, store = _a.store, rootId = _a.rootId, _b = _a.throwOnMissingField, throwOnMissingField = _b === void 0 ? false : _b, variables = _a.variables;
    if (selectionSet.kind !== 'SelectionSet') {
        throw new Error('Must be a selection set.');
    }
    var result = {};
    var missingSelectionSets = [];
    var missingSelections = [];
    var storeObj = store[rootId] || {};
    selectionSet.selections.forEach(function (selection) {
        if (selection.kind !== 'Field') {
            throw new Error('Only fields supported so far, not fragments.');
        }
        var field = selection;
        var storeFieldKey = storeUtils_1.storeKeyNameFromField(field, variables);
        var resultFieldKey = storeUtils_1.resultKeyNameFromField(field);
        if (!lodash_1.has(storeObj, storeFieldKey)) {
            if (throwOnMissingField) {
                throw new Error("Can't find field " + storeFieldKey + " on object " + storeObj + ".");
            }
            missingSelections.push(field);
            return;
        }
        var storeValue = storeObj[storeFieldKey];
        if (!field.selectionSet) {
            result[resultFieldKey] = storeValue;
            return;
        }
        if (lodash_1.isNull(storeValue)) {
            result[resultFieldKey] = null;
            return;
        }
        if (lodash_1.isArray(storeValue)) {
            result[resultFieldKey] = storeValue.map(function (id) {
                if (lodash_1.isNull(id)) {
                    return null;
                }
                var itemDiffResult = diffSelectionSetAgainstStore({
                    store: store,
                    throwOnMissingField: throwOnMissingField,
                    rootId: id,
                    selectionSet: field.selectionSet,
                    variables: variables,
                });
                itemDiffResult.missingSelectionSets.forEach(function (itemSelectionSet) { return missingSelectionSets.push(itemSelectionSet); });
                return itemDiffResult.result;
            });
            return;
        }
        if (lodash_1.isString(storeValue)) {
            var subObjDiffResult = diffSelectionSetAgainstStore({
                store: store,
                throwOnMissingField: throwOnMissingField,
                rootId: storeValue,
                selectionSet: field.selectionSet,
                variables: variables,
            });
            subObjDiffResult.missingSelectionSets.forEach(function (subObjSelectionSet) { return missingSelectionSets.push(subObjSelectionSet); });
            result[resultFieldKey] = subObjDiffResult.result;
            return;
        }
        throw new Error('Unexpected number value in the store where the query had a subselection.');
    });
    if (missingSelections.length) {
        var id = storeObj['id'];
        if (typeof id !== 'string' && rootId !== 'ROOT_QUERY') {
            throw new Error("Can't generate query to refetch object " + rootId + ", since it doesn't have a string id.");
        }
        var typeName = void 0;
        if (rootId === 'ROOT_QUERY') {
            typeName = 'Query';
        }
        else if (!storeObj.__typename) {
            throw new Error("Can't generate query to refetch object " + rootId + ", since __typename wasn't in the store.");
        }
        else {
            typeName = storeObj.__typename;
        }
        missingSelectionSets.push({
            id: rootId,
            typeName: typeName,
            selectionSet: {
                kind: 'SelectionSet',
                selections: missingSelections,
            },
        });
    }
    return {
        result: result,
        missingSelectionSets: missingSelectionSets,
    };
}
exports.diffSelectionSetAgainstStore = diffSelectionSetAgainstStore;
//# sourceMappingURL=diffAgainstStore.js.map