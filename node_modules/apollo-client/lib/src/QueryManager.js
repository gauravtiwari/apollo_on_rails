"use strict";
var parser_1 = require('./parser');
var lodash_1 = require('lodash');
var readFromStore_1 = require('./data/readFromStore');
var diffAgainstStore_1 = require('./data/diffAgainstStore');
var queryPrinting_1 = require('./queryPrinting');
var QueryManager = (function () {
    function QueryManager(_a) {
        var _this = this;
        var networkInterface = _a.networkInterface, store = _a.store, reduxRootKey = _a.reduxRootKey;
        this.idCounter = 0;
        this.networkInterface = networkInterface;
        this.store = store;
        this.reduxRootKey = reduxRootKey;
        this.resultCallbacks = {};
        if (this.store['subscribe']) {
            this.store['subscribe'](function () {
                _this.broadcastNewStore(_this.store.getState());
            });
        }
    }
    QueryManager.prototype.mutate = function (_a) {
        var _this = this;
        var mutation = _a.mutation, variables = _a.variables;
        var mutationId = this.idCounter.toString();
        this.idCounter++;
        var mutationDef = parser_1.parseMutation(mutation);
        var request = {
            query: mutation,
            variables: variables,
        };
        this.store.dispatch({
            type: 'MUTATION_INIT',
            mutationString: mutation,
            mutation: {
                id: 'ROOT_MUTATION',
                typeName: 'Mutation',
                selectionSet: mutationDef.selectionSet,
            },
            variables: variables,
            mutationId: mutationId,
        });
        return this.networkInterface.query(request)
            .then(function (result) {
            _this.store.dispatch({
                type: 'MUTATION_RESULT',
                result: result,
                mutationId: mutationId,
            });
            return result;
        });
    };
    QueryManager.prototype.watchQuery = function (_a) {
        var _this = this;
        var query = _a.query, variables = _a.variables, _b = _a.forceFetch, forceFetch = _b === void 0 ? true : _b, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? false : _c;
        var queryId = this.idCounter.toString();
        this.idCounter++;
        this.resultCallbacks[queryId] = [];
        var queryString = query;
        var querySS = {
            id: 'ROOT_QUERY',
            typeName: 'Query',
            selectionSet: parser_1.parseQuery(query).selectionSet,
        };
        var minimizedQueryString = query;
        var minimizedQuery = querySS;
        var initialResult;
        if (!forceFetch) {
            var _d = diffAgainstStore_1.diffSelectionSetAgainstStore({
                selectionSet: querySS.selectionSet,
                store: this.store.getState()[this.reduxRootKey].data,
                throwOnMissingField: false,
                rootId: querySS.id,
                variables: variables,
            }), missingSelectionSets = _d.missingSelectionSets, result = _d.result;
            initialResult = result;
            if (missingSelectionSets.length) {
                var diffedQueryDef = queryPrinting_1.queryDefinition(missingSelectionSets);
                minimizedQuery = {
                    id: 'ROOT_QUERY',
                    typeName: 'Query',
                    selectionSet: diffedQueryDef.selectionSet,
                };
                minimizedQueryString = queryPrinting_1.printQueryFromDefinition(diffedQueryDef);
            }
            else {
                minimizedQuery = null;
                minimizedQueryString = null;
            }
        }
        this.store.dispatch({
            type: 'QUERY_INIT',
            queryString: queryString,
            query: querySS,
            minimizedQueryString: minimizedQueryString,
            minimizedQuery: minimizedQuery,
            variables: variables,
            forceFetch: forceFetch,
            returnPartialData: returnPartialData,
            queryId: queryId,
        });
        if (minimizedQuery) {
            var request = {
                query: minimizedQueryString,
                variables: variables,
            };
            this.networkInterface.query(request)
                .then(function (result) {
                _this.store.dispatch({
                    type: 'QUERY_RESULT',
                    result: result,
                    queryId: queryId,
                });
            }).catch(function (error) {
            });
        }
        if (!minimizedQuery || returnPartialData) {
            setTimeout(function () {
                _this.store.dispatch({
                    type: 'QUERY_RESULT_CLIENT',
                    result: {
                        data: initialResult,
                    },
                    variables: variables,
                    query: querySS,
                    complete: !!minimizedQuery,
                    queryId: queryId,
                });
            }, 0);
        }
        return this.watchQueryInStore(queryId);
    };
    QueryManager.prototype.broadcastNewStore = function (store) {
        var _this = this;
        var apolloStore = store[this.reduxRootKey];
        lodash_1.forOwn(apolloStore.queries, function (queryStoreValue, queryId) {
            if (!queryStoreValue.loading) {
                if (queryStoreValue.graphQLErrors) {
                    _this.broadcastQueryChange(queryId, {
                        errors: queryStoreValue.graphQLErrors,
                    });
                }
                else {
                    var resultFromStore = readFromStore_1.readSelectionSetFromStore({
                        store: apolloStore.data,
                        rootId: queryStoreValue.query.id,
                        selectionSet: queryStoreValue.query.selectionSet,
                        variables: queryStoreValue.variables,
                    });
                    _this.broadcastQueryChange(queryId, {
                        data: resultFromStore,
                    });
                }
            }
        });
    };
    QueryManager.prototype.watchQueryInStore = function (queryId) {
        var _this = this;
        var isStopped = function () {
            return !_this.store.getState()[_this.reduxRootKey].queries[queryId];
        };
        return {
            id: queryId,
            isStopped: isStopped,
            stop: function () {
                _this.stopQuery(queryId);
            },
            onResult: function (callback) {
                if (isStopped()) {
                    throw new Error('Query was stopped. Please create a new one.');
                }
                _this.registerResultCallback(queryId, callback);
            },
        };
    };
    QueryManager.prototype.stopQuery = function (queryId) {
        this.store.dispatch({
            type: 'QUERY_STOP',
            queryId: queryId,
        });
        delete this.resultCallbacks[queryId];
    };
    QueryManager.prototype.broadcastQueryChange = function (queryId, result) {
        this.resultCallbacks[queryId].forEach(function (callback) {
            callback(result);
        });
    };
    QueryManager.prototype.registerResultCallback = function (queryId, callback) {
        this.resultCallbacks[queryId].push(callback);
    };
    return QueryManager;
}());
exports.QueryManager = QueryManager;
//# sourceMappingURL=QueryManager.js.map