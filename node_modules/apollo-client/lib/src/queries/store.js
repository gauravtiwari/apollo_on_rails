"use strict";
var actions_1 = require('../actions');
var lodash_1 = require('lodash');
function queries(previousState, action) {
    if (previousState === void 0) { previousState = {}; }
    if (actions_1.isQueryInitAction(action)) {
        var newState = lodash_1.assign({}, previousState);
        newState[action.queryId] = {
            queryString: action.queryString,
            query: action.query,
            minimizedQueryString: action.minimizedQueryString,
            minimizedQuery: action.minimizedQuery,
            variables: action.variables,
            loading: true,
            networkError: null,
            graphQLErrors: null,
            forceFetch: action.forceFetch,
            returnPartialData: action.returnPartialData,
        };
        return newState;
    }
    else if (actions_1.isQueryResultAction(action)) {
        var newState = lodash_1.assign({}, previousState);
        var resultHasGraphQLErrors = action.result.errors && action.result.errors.length;
        newState[action.queryId] = lodash_1.assign({}, previousState[action.queryId], {
            loading: false,
            networkError: null,
            graphQLErrors: resultHasGraphQLErrors ? action.result.errors : null,
        });
        return newState;
    }
    else if (actions_1.isQueryResultClientAction(action)) {
        var newState = lodash_1.assign({}, previousState);
        newState[action.queryId] = lodash_1.assign({}, previousState[action.queryId], {
            loading: action.complete,
            networkError: null,
        });
        return newState;
    }
    else if (actions_1.isQueryStopAction(action)) {
        var newState = lodash_1.assign({}, previousState);
        delete newState[action.queryId];
        return newState;
    }
    return previousState;
}
exports.queries = queries;
//# sourceMappingURL=store.js.map