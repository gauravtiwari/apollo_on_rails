import { NetworkInterface, createNetworkInterface } from './networkInterface';
import { GraphQLResult } from 'graphql';
import { createApolloStore, ApolloStore, createApolloReducer } from './store';
import { QueryManager, WatchedQueryHandle, WatchQueryOptions } from './QueryManager';
export { createNetworkInterface, createApolloStore, createApolloReducer };
export default class ApolloClient {
    networkInterface: NetworkInterface;
    store: ApolloStore;
    reduxRootKey: string;
    queryManager: QueryManager;
    constructor({networkInterface, reduxRootKey}?: {
        networkInterface?: NetworkInterface;
        reduxRootKey?: string;
    });
    watchQuery(options: WatchQueryOptions): WatchedQueryHandle;
    query(options: WatchQueryOptions): Promise<GraphQLResult | Error>;
    mutate(options: {
        mutation: string;
        variables?: Object;
    }): Promise<GraphQLResult>;
    reducer(): Function;
    middleware(): (store: ApolloStore) => (next: any) => (action: any) => any;
    initStore(): void;
    private setStore(store);
}
