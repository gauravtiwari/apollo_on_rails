"use strict";
require('es6-promise');
require('isomorphic-fetch');
var lodash_1 = require('lodash');
function createNetworkInterface(uri, opts) {
    if (opts === void 0) { opts = {}; }
    if (!uri) {
        throw new Error('A remote enpdoint is required for a network layer');
    }
    if (!lodash_1.isString(uri)) {
        throw new Error('Remote endpoint must be a string');
    }
    var _uri = uri;
    var _opts = lodash_1.assign({}, opts);
    var _middlewares = [];
    function applyMiddlewares(request) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var queue = function (funcs, scope) {
                var next = function () {
                    if (funcs.length > 0) {
                        var f = funcs.shift();
                        f.applyMiddleware.apply(scope, [{ request: request, options: _opts }, next]);
                    }
                    else {
                        resolve(request);
                    }
                };
                next();
            };
            queue(_middlewares, _this);
        });
    }
    function fetchFromRemoteEndpoint(request) {
        return fetch(uri, lodash_1.assign({}, _opts, {
            body: JSON.stringify(request),
            headers: lodash_1.assign({}, _opts.headers, {
                Accept: '*/*',
                'Content-Type': 'application/json',
            }),
            method: 'POST',
        }));
    }
    ;
    function query(request) {
        return applyMiddlewares(request)
            .then(fetchFromRemoteEndpoint)
            .then(function (result) { return result.json(); })
            .then(function (payload) {
            if (!payload.hasOwnProperty('data') && !payload.hasOwnProperty('errors')) {
                throw new Error("Server response was missing for query '" + request.debugName + "'.");
            }
            else {
                return payload;
            }
        });
    }
    ;
    function use(middlewares) {
        middlewares.map(function (middleware) {
            if (typeof middleware.applyMiddleware === 'function') {
                _middlewares.push(middleware);
            }
            else {
                throw new Error('Middleware must implement the applyMiddleware function');
            }
        });
    }
    return {
        _uri: _uri,
        _opts: _opts,
        _middlewares: _middlewares,
        query: query,
        use: use,
    };
}
exports.createNetworkInterface = createNetworkInterface;
//# sourceMappingURL=networkInterface.js.map